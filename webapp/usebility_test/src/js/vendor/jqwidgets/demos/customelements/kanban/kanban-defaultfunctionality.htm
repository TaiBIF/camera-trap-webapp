<!DOCTYPE html>
<html lang="en">
<head>
    <title id='Description'>Custom Element Kanban DefaultFunctioality</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="viewport" content="width=device-width, initial-scale=1 maximum-scale=1 minimum-scale=1" />
    <meta name="description" content="This is an example of the default functionalities of Custom Element Kanban." />

    <link rel="stylesheet" href="../jqwidgets/styles/jqx.base.css" type="text/css" />
    <link rel="stylesheet" href="../styles/demos.css" type="text/css" />

    <script type="text/javascript" src="../scripts/webcomponents-lite.min.js"></script>
    <script type="text/javascript" src="../jqwidgets/jqxcore.js"></script>
    <script type="text/javascript" src="../jqwidgets/jqxcore.elements.js"></script>
    <script type="text/javascript" src="../jqwidgets/jqxsortable.js"></script>
    <script type="text/javascript" src="../jqwidgets/jqxkanban.js"></script>
    <script type="text/javascript" src="../jqwidgets/jqxsplitter.js"></script>
    <script type="text/javascript" src="../jqwidgets/jqxdata.js"></script>
    <script type="text/javascript" src="../scripts/demos.js"></script>
    <script type="text/javascript">
        var fields = 
            [
                { name: 'status', map: 'state', type: 'string' },
                { name: 'text', map: 'label', type: 'string' },
                { name: 'tags', type: 'string' },
                { name: 'color', map: 'hex', type: 'string' },
                { name: 'resourceId', type: 'number' }
            ];

        var resourcesAdapterFunc = function() {
            var resourcesSource =
                {
                    localData: [
                        { id: 0, name: 'No name', image: '../jqwidgets/styles/images/common.png', common: true },
                        { id: 1, name: 'Andrew Fuller', image: '../images/andrew.png' },
                        { id: 2, name: 'Janet Leverling', image: '../images/janet.png' },
                        { id: 3, name: 'Steven Buchanan', image: '../images/steven.png' },
                        { id: 4, name: 'Nancy Davolio', image: '../images/nancy.png' },
                        { id: 5, name: 'Michael Buchanan', image: '../images/Michael.png' },
                        { id: 6, name: 'Margaret Buchanan', image: '../images/margaret.png' },
                        { id: 7, name: 'Robert Buchanan', image: '../images/robert.png' },
                        { id: 8, name: 'Laura Buchanan', image: '../images/Laura.png' },
                        { id: 9, name: 'Laura Buchanan', image: '../images/Anne.png' }
                    ],
                    dataType: 'array',
                    dataFields: [
                        { name: 'id', type: 'number' },
                        { name: 'name', type: 'string' },
                        { name: 'image', type: 'string' },
                        { name: 'common', type: 'boolean' }
                    ]
                };

            var resourcesDataAdapter = new jqx.dataAdapter(resourcesSource);

            return resourcesDataAdapter;
        }

        var source =
            {
                localData: [
                    { state: 'new', label: 'Combine Orders', tags: 'orders, combine', hex: '#5dc3f0', resourceId: 3 },
                    { state: 'new', label: 'Change Billing Address', tags: 'billing', hex: '#f19b60', resourceId: 1 },
                    { state: 'new', label: 'One item added to the cart', tags: 'cart', hex: '#5dc3f0', resourceId: 3 },
                    { state: 'new', label: 'Edit Item Price', tags: 'price, edit', hex: '#5dc3f0', resourceId: 4 },
                    { state: 'new', label: 'Login 404 issue', tags: 'issue, login', hex: '#6bbd49' }
                ],
                dataType: 'array',
                dataFields: fields
            };
        var dataAdapter = new jqx.dataAdapter(source);

        var source2 =
            {
                localData: [
                    { state: 'ready', label: 'Logout issue', tags: 'logout, issue', hex: '#5dc3f0', resourceId: 7 },
                    { state: 'ready', label: 'Remember password issue', tags: 'password, issue', hex: '#6bbd49', resourceId: 8 },
                    { state: 'ready', label: 'Cart calculation issue', tags: 'cart, calculation', hex: '#f19b60', resourceId: 9 },
                    { state: 'ready', label: 'Remove topic issue', tags: 'topic, issue', hex: '#6bbd49' }
                ],
                dataType: 'array',
                dataFields: fields
            };
        var dataAdapter2 = new jqx.dataAdapter(source2);

        var source3 =
            {
                localData: [
                    { state: 'done', label: 'Delete orders', tags: 'orders, combine', hex: '#f19b60', resourceId: 4 },
                    { state: 'work', label: 'Add New Address', tags: 'address', hex: '#6bbd49', resourceId: 5 },
                    { state: 'new', label: 'Rename items', tags: 'rename', hex: '#5dc3f0', resourceId: 6 },
                    { state: 'work', label: 'Update cart', tags: 'cart, update', hex: '#6bbd49' }
                ],
                dataType: 'array',
                dataFields: fields
            };
        var dataAdapter3 = new jqx.dataAdapter(source3);

        JQXElements.settings['Kanban1'] =
            {
                resources: resourcesAdapterFunc(),
                source: dataAdapter,
                width: '100%',
                height: '100%',
                connectWith: '#kanban2, #kanban3',
                columns: [
                    { text: 'Backlog', dataField: 'new', maxItems: 10 }
                ],
                // render column headers.
                columnRenderer: (element, collapsedElement, column) => {
                    if (element[0]) {
                        var headerStatus = element[0].getElementsByClassName('jqx-kanban-column-header-status')[0];
                        var columnItems = document.getElementById('kanban1').getColumnItems(column.dataField).length;
                        headerStatus.innerHTML = ' (' + columnItems + '/' + column.maxItems + ')';
                    }
                }
            }

        JQXElements.settings['Kanban2'] =
            {
                resources: resourcesAdapterFunc(),
                source: dataAdapter2,
                width: '100%',
                height: '100%',
                connectWith: '#kanban1, #kanban3',
                columns: [
                    { text: 'Ready', dataField: 'ready', maxItems: 10 }
                ],
                // render column headers.
                columnRenderer: (element, collapsedElement, column) => {
                    var columnItems = document.getElementById('kanban2').getColumnItems(column.dataField).length;
                    // update header's status.
                    element.find('.jqx-kanban-column-header-status').innerHTML = ' (' + columnItems + '/' + column.maxItems + ')';
                    // update collapsed header's status.
                    collapsedElement.find('.jqx-kanban-column-header-status').innerHTML = ' (' + columnItems + '/' + column.maxItems + ')';
                }
            }

        JQXElements.settings['Kanban3'] =
            {
                resources: resourcesAdapterFunc(),
                source: dataAdapter3,
                width: '100%',
                height: '100%',
                connectWith: '#kanban1, #kanban2',
                columns: [
                    { text: 'Backlog', dataField: 'new', maxItems: 5 },
                    { text: 'In Progress', dataField: 'work', maxItems: 5 },
                    { text: 'Done', dataField: 'done', maxItems: 5 }
                ],
                // render column headers.
                columnRenderer: (element, collapsedElement, column) => {
                    var columnItems = document.getElementById('kanban3').getColumnItems(column.dataField).length;
                    // update header's status.
                    element.find('.jqx-kanban-column-header-status').innerHTML = ' (' + columnItems + '/' + column.maxItems + ')';
                    // update collapsed header's status.
                    collapsedElement.find('.jqx-kanban-column-header-status').innerHTML = ' (' + columnItems + '/' + column.maxItems + ')';
                }
            }

        JQXElements.settings['MainSplitterSettings'] =
            {
                panels: [{ size: 250, min: 100 }, { min: 250 }],
                width: 850,
                height: 700
            }

        JQXElements.settings['RightSplitterSettings'] =
            {
                orientation: 'horizontal',
                width: '100%',
                height: '100%',
                panels: [{ min: 200, size: 350, collapsible: false }, { min: 200 }]
            }
    </script>
</head>
<body>
    <div class="example-description">
        This demo illustrates the basic functionality of the Kanban Custom Element.
    </div>
   
    <jqx-splitter settings="MainSplitterSettings">

        <div>
            <jqx-kanban id="kanban1" settings="Kanban1"></jqx-kanban>
        </div>

        <div style="overflow: visible;">
            <jqx-splitter style="overflow: visible;" settings="RightSplitterSettings">
                <div>
                    <jqx-kanban id="kanban2" settings="Kanban2"></jqx-kanban>
                </div>

                <div>
                    <jqx-kanban id="kanban3" settings="Kanban3"></jqx-kanban>
                </div>
            </jqx-splitter>
        </div>
    </jqx-splitter>
</body>
</html>
